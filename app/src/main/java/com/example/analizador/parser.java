
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.example.analizador;

import com.example.modelo_grafica.GraficaBarras;

import java_cup.runtime.*;
import java.util.ArrayList;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\044\000\002\002\005\000\002\002\004\000\002\002" +
    "\004\000\002\005\006\000\002\005\006\000\002\005\004" +
    "\000\002\004\003\000\002\004\003\000\002\003\010\000" +
    "\002\003\007\000\002\007\007\000\002\007\013\000\002" +
    "\007\013\000\002\007\023\000\002\007\004\000\002\007" +
    "\003\000\002\010\003\000\002\011\005\000\002\011\005" +
    "\000\002\011\005\000\002\011\005\000\002\011\003\000" +
    "\002\013\005\000\002\013\003\000\002\013\003\000\002" +
    "\006\007\000\002\006\007\000\002\006\013\000\002\006" +
    "\013\000\002\006\007\000\002\006\023\000\002\006\007" +
    "\000\002\006\004\000\002\006\003\000\002\012\003\000" +
    "\002\012\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\220\000\006\004\005\043\006\001\002\000\004\002" +
    "\222\001\002\000\010\005\011\006\013\043\012\001\002" +
    "\000\006\004\005\043\006\001\002\000\010\002\uffff\004" +
    "\uffff\043\uffff\001\002\000\006\004\005\043\006\001\002" +
    "\000\004\027\143\001\002\000\010\005\011\006\013\043" +
    "\012\001\002\000\004\027\014\001\002\000\024\007\015" +
    "\012\024\013\021\014\023\015\022\016\016\017\026\030" +
    "\020\043\025\001\002\000\004\034\136\001\002\000\004" +
    "\034\132\001\002\000\010\004\005\020\123\043\006\001" +
    "\002\000\010\004\uffe0\020\uffe0\043\uffe0\001\002\000\004" +
    "\034\072\001\002\000\004\034\064\001\002\000\004\034" +
    "\044\001\002\000\004\034\034\001\002\000\024\007\015" +
    "\012\024\013\021\014\023\015\022\016\016\017\026\030" +
    "\020\043\025\001\002\000\004\034\027\001\002\000\004" +
    "\036\030\001\002\000\004\035\031\001\002\000\024\007" +
    "\015\012\024\013\021\014\023\015\022\016\016\017\026" +
    "\030\020\043\025\001\002\000\010\004\uffe2\020\uffe2\043" +
    "\uffe2\001\002\000\010\004\uffe1\020\uffe1\043\uffe1\001\002" +
    "\000\004\031\035\001\002\000\004\036\036\001\002\000" +
    "\004\033\037\001\002\000\004\036\040\001\002\000\004" +
    "\032\041\001\002\000\004\035\042\001\002\000\024\007" +
    "\015\012\024\013\021\014\023\015\022\016\016\017\026" +
    "\030\020\043\025\001\002\000\010\004\uffe6\020\uffe6\043" +
    "\uffe6\001\002\000\004\031\045\001\002\000\004\027\046" +
    "\001\002\000\004\041\047\001\002\000\004\033\050\001" +
    "\002\000\004\041\051\001\002\000\004\030\052\001\002" +
    "\000\004\033\053\001\002\000\004\027\054\001\002\000" +
    "\004\041\055\001\002\000\004\033\056\001\002\000\004" +
    "\041\057\001\002\000\004\030\060\001\002\000\004\032" +
    "\061\001\002\000\004\035\062\001\002\000\024\007\015" +
    "\012\024\013\021\014\023\015\022\016\016\017\026\030" +
    "\020\043\025\001\002\000\010\004\uffe3\020\uffe3\043\uffe3" +
    "\001\002\000\006\037\066\040\065\001\002\000\004\035" +
    "\uffde\001\002\000\004\035\uffdf\001\002\000\004\035\070" +
    "\001\002\000\024\007\015\012\024\013\021\014\023\015" +
    "\022\016\016\017\026\030\020\043\025\001\002\000\010" +
    "\004\uffe7\020\uffe7\043\uffe7\001\002\000\004\031\073\001" +
    "\002\000\010\025\076\041\101\042\077\001\002\000\024" +
    "\021\uffec\022\uffec\023\uffec\024\uffec\026\uffec\030\uffec\032" +
    "\uffec\033\uffec\035\uffec\001\002\000\004\033\114\001\002" +
    "\000\010\025\076\041\101\042\077\001\002\000\024\021" +
    "\uffe9\022\uffe9\023\uffe9\024\uffe9\026\uffe9\030\uffe9\032\uffe9" +
    "\033\uffe9\035\uffe9\001\002\000\022\021\104\022\103\023" +
    "\102\024\105\030\ufff1\032\ufff1\033\ufff1\035\ufff1\001\002" +
    "\000\024\021\uffea\022\uffea\023\uffea\024\uffea\026\uffea\030" +
    "\uffea\032\uffea\033\uffea\035\uffea\001\002\000\010\025\076" +
    "\041\101\042\077\001\002\000\010\025\076\041\101\042" +
    "\077\001\002\000\010\025\076\041\101\042\077\001\002" +
    "\000\010\025\076\041\101\042\077\001\002\000\024\021" +
    "\uffed\022\uffed\023\uffed\024\uffed\026\uffed\030\uffed\032\uffed" +
    "\033\uffed\035\uffed\001\002\000\024\021\ufff0\022\ufff0\023" +
    "\ufff0\024\ufff0\026\ufff0\030\ufff0\032\ufff0\033\ufff0\035\ufff0" +
    "\001\002\000\024\021\uffef\022\uffef\023\uffef\024\uffef\026" +
    "\uffef\030\uffef\032\uffef\033\uffef\035\uffef\001\002\000\024" +
    "\021\uffee\022\uffee\023\uffee\024\uffee\026\uffee\030\uffee\032" +
    "\uffee\033\uffee\035\uffee\001\002\000\014\021\104\022\103" +
    "\023\102\024\105\026\113\001\002\000\024\021\uffeb\022" +
    "\uffeb\023\uffeb\024\uffeb\026\uffeb\030\uffeb\032\uffeb\033\uffeb" +
    "\035\uffeb\001\002\000\010\025\076\041\101\042\077\001" +
    "\002\000\004\032\116\001\002\000\004\035\117\001\002" +
    "\000\024\007\015\012\024\013\021\014\023\015\022\016" +
    "\016\017\026\030\020\043\025\001\002\000\010\004\uffe5" +
    "\020\uffe5\043\uffe5\001\002\000\006\004\ufffa\043\ufffa\001" +
    "\002\000\006\004\ufffb\043\ufffb\001\002\000\004\025\125" +
    "\001\002\000\006\004\ufffd\043\ufffd\001\002\000\004\036" +
    "\126\001\002\000\004\026\127\001\002\000\004\035\130" +
    "\001\002\000\010\004\ufff8\020\123\043\ufff8\001\002\000" +
    "\006\004\ufff9\043\ufff9\001\002\000\010\025\076\041\101" +
    "\042\077\001\002\000\004\035\134\001\002\000\024\007" +
    "\015\012\024\013\021\014\023\015\022\016\016\017\026" +
    "\030\020\043\025\001\002\000\010\004\uffe4\020\uffe4\043" +
    "\uffe4\001\002\000\004\036\137\001\002\000\004\035\140" +
    "\001\002\000\024\007\015\012\024\013\021\014\023\015" +
    "\022\016\016\017\026\030\020\043\025\001\002\000\010" +
    "\004\uffe8\020\uffe8\043\uffe8\001\002\000\006\004\ufffc\043" +
    "\ufffc\001\002\000\016\007\144\010\150\011\147\014\145" +
    "\030\152\043\146\001\002\000\004\034\215\001\002\000" +
    "\004\034\175\001\002\000\016\007\144\010\150\011\147" +
    "\014\145\030\152\043\146\001\002\000\004\034\164\001" +
    "\002\000\004\034\154\001\002\000\010\004\005\020\123" +
    "\043\006\001\002\000\010\004\ufff2\020\ufff2\043\ufff2\001" +
    "\002\000\006\004\ufffe\043\ufffe\001\002\000\004\031\155" +
    "\001\002\000\004\036\156\001\002\000\004\033\157\001" +
    "\002\000\004\036\160\001\002\000\004\032\161\001\002" +
    "\000\004\035\162\001\002\000\016\007\144\010\150\011" +
    "\147\014\145\030\152\043\146\001\002\000\010\004\ufff6" +
    "\020\ufff6\043\ufff6\001\002\000\004\031\165\001\002\000" +
    "\010\025\076\041\101\042\077\001\002\000\004\033\167" +
    "\001\002\000\010\025\076\041\101\042\077\001\002\000" +
    "\004\032\171\001\002\000\004\035\172\001\002\000\016" +
    "\007\144\010\150\011\147\014\145\030\152\043\146\001" +
    "\002\000\010\004\ufff5\020\ufff5\043\ufff5\001\002\000\010" +
    "\004\ufff3\020\ufff3\043\ufff3\001\002\000\004\031\176\001" +
    "\002\000\004\027\177\001\002\000\010\025\076\041\101" +
    "\042\077\001\002\000\004\033\201\001\002\000\010\025" +
    "\076\041\101\042\077\001\002\000\004\030\203\001\002" +
    "\000\004\033\204\001\002\000\004\027\205\001\002\000" +
    "\010\025\076\041\101\042\077\001\002\000\004\033\207" +
    "\001\002\000\010\025\076\041\101\042\077\001\002\000" +
    "\004\030\211\001\002\000\004\032\212\001\002\000\004" +
    "\035\213\001\002\000\016\007\144\010\150\011\147\014" +
    "\145\030\152\043\146\001\002\000\010\004\ufff4\020\ufff4" +
    "\043\ufff4\001\002\000\004\036\216\001\002\000\004\035" +
    "\217\001\002\000\016\007\144\010\150\011\147\014\145" +
    "\030\152\043\146\001\002\000\010\004\ufff7\020\ufff7\043" +
    "\ufff7\001\002\000\010\002\001\004\001\043\001\001\002" +
    "\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\220\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\005\007\001\001\000\004\002\006\001\001\000\002" +
    "\001\001\000\004\002\220\001\001\000\002\001\001\000" +
    "\004\005\141\001\001\000\002\001\001\000\004\006\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\002" +
    "\121\003\120\004\123\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\062\001\001\000" +
    "\002\001\001\000\004\012\066\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\010\074" +
    "\011\077\013\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\011\111\013\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\110\001" +
    "\001\000\004\013\107\001\001\000\004\013\106\001\001" +
    "\000\004\013\105\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\010\114\011\077\013\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\117" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\130\001" +
    "\001\000\002\001\001\000\010\010\132\011\077\013\073" +
    "\001\001\000\002\001\001\000\004\006\134\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\140\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\150\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\173\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\002\121\003\120\004\152\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\162\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\010\165\011\077\013\073" +
    "\001\001\000\002\001\001\000\010\010\167\011\077\013" +
    "\073\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\172\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\010\177\011\077" +
    "\013\073\001\001\000\002\001\001\000\010\010\201\011" +
    "\077\013\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\010\205\011\077\013\073\001" +
    "\001\000\002\001\001\000\010\010\207\011\077\013\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\213\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\217\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public parser(Lexer automata){
		super(automata);
	}
	
	private ArrayList<String> etiquetas=new ArrayList<String>();
	private ArrayList<String> ejesx=new ArrayList<String>();
	private ArrayList<Double> ejesy=new ArrayList<Double>();
	private ArrayList<String> uniones=new ArrayList<String>();
	private ArrayList<Double> valores=new ArrayList<Double>();
	
	private String titulo="";
	private String tipo="";
	private Double total = 0.0;
	private String extra="";
	private GraficaBarras graficaBarras;
	
	
	public ArrayList<String> getEtiquetas(){
		return etiquetas;
	}
	public ArrayList<String> getEjesX(){
		return ejesx;
	}
	public ArrayList<Double> getEjesY(){
		return ejesy;	
	}
	public ArrayList<String> getUniones(){
		return uniones;
	}
	public ArrayList<Double> getValores(){
		return valores;
	}
	
	public String getTitulo(){
		return titulo;
	};
	public String getTipo(){
		return tipo;
	};
	public Double getTotal(){
		return total;
	};
	public String getExtra(){
		return extra;
	}

	private GraficaBarras getGraficaBarras(){
		return graficaBarras;
	}

	public void ejeY(String[] ejes){
		for(int i=0;i<ejes.length;i++){
			double ejeY=Double.parseDouble(ejes[i]);
			ejesy.add(ejeY);
		}
	}
	public void ejeX(String[] ejes){
		for(int i=0;i<ejes.length;i++){
			ejesx.add(ejes[i]);
		}
	}
	
	public void etiquetas(String[] etiqueta){
		for(int i=0;i<etiqueta.length;i++){
			etiquetas.add(etiqueta[i]);
		}
	}
	
	public void uniones(String[] unir){
		for(int i=0;i<unir.length;i++){
			uniones.add(unir[i]);
		}
	}
	
	public void valores(String[] valor){
		for(int i=0;i<valor.length;i++){
			double numero=Double.parseDouble(valor[i]);
			valores.add(numero);
		}
	}
	
	public void barras(){
		graficaBarras=new GraficaBarras(titulo,ejesx,ejesy,uniones);
	}
	
	public void report_error(String message, Object info) {
        	System.out.println("public void report_error");
    	}
    	public void report_fatal_error(String message, Object info) {
        	System.out.println("public void report_fatal_error");
    	}
    	public void syntax_error(Symbol cur_token) {
        	System.out.println("El error es el simbolo: " + sym.terminalNames[cur_token.sym]);
        	System.out.println(String.format("En la posicion: %d, %d", cur_token.left, cur_token.right));
    	}
    	public void unrecovered_syntax_error(Symbol cur_token) {
        	if (cur_token.sym == sym.EOF) {
        	    	System.out.println("public void unrecoveredsyntax_error");
        	}
    	}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // a ::= DEF tipoGrafica a 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("a",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= a EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // a ::= COMENTARIO a 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("a",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // tipoGrafica ::= BARRAS LLAVE_A barras c 
            {
              Object RESULT =null;
		barras();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoGrafica",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // tipoGrafica ::= PIE LLAVE_A pie c 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoGrafica",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // tipoGrafica ::= COMENTARIO tipoGrafica 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoGrafica",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // c ::= a 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // c ::= b 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // b ::= EJECUTAR PARENTESIS_A CADENA PARENTESIS_C PUNTO_COMA b 
            {
              Object RESULT =null;
		int ejecutarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ejecutarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object ejecutar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("b",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // b ::= EJECUTAR PARENTESIS_A CADENA PARENTESIS_C PUNTO_COMA 
            {
              Object RESULT =null;
		int ejecutarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ejecutarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ejecutar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("b",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // barras ::= TITULO DOS_PUNTOS CADENA PUNTO_COMA barras 
            {
              Object RESULT =null;
		int titleleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int titleright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object title = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		titulo=title.toString().replaceAll("\"","");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("barras",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // barras ::= EJEX DOS_PUNTOS CORCHETE_A CADENA COMA CADENA CORCHETE_C PUNTO_COMA barras 
            {
              Object RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object valor1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object valor2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
	String[] valores=new String[2];
	valores[0]=valor1.toString().replaceAll("\"","");
	valores[1]=valor2.toString().replaceAll("\"","");
	ejeX(valores);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("barras",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // barras ::= EJEY DOS_PUNTOS CORCHETE_A numero COMA numero CORCHETE_C PUNTO_COMA barras 
            {
              Object RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object valor1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object valor2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
	String[] valores=new String[2];
	valores[0]=valor1.toString().replaceAll("\"","");
	valores[1]=valor2.toString().replaceAll("\"","");
	ejeY(valores);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("barras",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // barras ::= UNIR DOS_PUNTOS CORCHETE_A LLAVE_A numero COMA numero LLAVE_C COMA LLAVE_A numero COMA numero LLAVE_C CORCHETE_C PUNTO_COMA barras 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int num3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int num3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object num3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int num4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int num4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object num4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
	String[] valores=new String[4];
	valores[0]=num1.toString();
	valores[1]=num2.toString();
	valores[2]=num3.toString();
	valores[3]=num3.toString();
	uniones(valores);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("barras",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // barras ::= COMENTARIO barras 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("barras",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // barras ::= LLAVE_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("barras",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // numero ::= operacion 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=num;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numero",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // operacion ::= operacion SUMA x 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=(double)num + (double)num2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // operacion ::= operacion RESTA x 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=(double)num-(double)num2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // operacion ::= operacion MULTIPLICACION x 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=(double)num * (double)num2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // operacion ::= operacion DIVISION x 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=(double)num / (double)num2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // operacion ::= x 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=num;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // x ::= PARENTESIS_A operacion PARENTESIS_C 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=num;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("x",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // x ::= ENTERO 
            {
              Object RESULT =null;
		int enteroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int enteroright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object entero = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=entero;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("x",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // x ::= DECIMAL 
            {
              Object RESULT =null;
		int decimalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int decimalright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object decimal = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=decimal;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("x",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // pie ::= TITULO DOS_PUNTOS CADENA PUNTO_COMA pie 
            {
              Object RESULT =null;
		int titleleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int titleright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object title = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 titulo=title.toString().replaceAll("\"",""); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pie",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // pie ::= TIPO DOS_PUNTOS tipo PUNTO_COMA pie 
            {
              Object RESULT =null;
		int textoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int textoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object texto = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		tipo=texto.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pie",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // pie ::= ETIQUETAS DOS_PUNTOS CORCHETE_A CADENA COMA CADENA CORCHETE_C PUNTO_COMA pie 
            {
              Object RESULT =null;
		int etiqueta1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int etiqueta1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object etiqueta1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int etiqueta2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int etiqueta2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object etiqueta2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
	String[] valores=new String[2];
	valores[0]=etiqueta1.toString().replaceAll("\"","");
	valores[1]=etiqueta2.toString().replaceAll("\"","");
	etiquetas(valores);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pie",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // pie ::= VALORES DOS_PUNTOS CORCHETE_A numero COMA numero CORCHETE_C PUNTO_COMA pie 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
	String[] valor=new String[2];
	valor[0]=num1.toString();
	valor[1]=num2.toString();
	valores(valor);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pie",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // pie ::= TOTAL DOS_PUNTOS numero PUNTO_COMA pie 
            {
              Object RESULT =null;
		int totleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int totright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object tot = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 total=Double.parseDouble(tot.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pie",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // pie ::= UNIR DOS_PUNTOS CORCHETE_A LLAVE_A ENTERO COMA ENTERO LLAVE_C COMA LLAVE_A ENTERO COMA ENTERO LLAVE_C CORCHETE_C PUNTO_COMA pie 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int num3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int num3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object num3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int num4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int num4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object num4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
	String[] valores=new String[4];
	valores[0]=num1.toString();
	valores[1]=num2.toString();
	valores[2]=num3.toString();
	valores[3]=num4.toString();
	uniones(valores);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pie",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // pie ::= EXTRA DOS_PUNTOS CADENA PUNTO_COMA pie 
            {
              Object RESULT =null;
		int textoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int textoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object texto = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 extra=texto.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pie",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // pie ::= COMENTARIO pie 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pie",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // pie ::= LLAVE_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pie",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // tipo ::= PORCENTAJE 
            {
              Object RESULT =null;
		RESULT="Porcentaje";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // tipo ::= CANTIDAD 
            {
              Object RESULT =null;
		RESULT="Cantidad";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
